def buscar_palabras_sopa_letras():
    cuadricula_texto = """
SXZINDLOJTZMDHTQJSKVYUUVQLCOSDSTRGAHYHRATNEMELPMIX
PWJEJSABFEDCGSULHBORCCYYDDSDMLLFQSDPLBNEUNRYQADKHZ
JRBTAQEWDYAJYAYUGLZIOPWAJXOMEUTKVDGLUKWAOUKJQNYNVY
EEXHNLDHIAAGPUYHBOGZAREDILSXJHKQWMKFYXKIOFKGKCAWDO
VQQGDWISKJJBXPKKRRYMZORPPZRGHBWFJYGPRXSPTCKCYLPTBN
OLQGPFRCYYWPAUJEJJAIHAGKMBURVSOAFIXIKICKLXNIPMTOTS
TSNANXTAUSCRKMGKHQKOBQUYKZCQARXQDZMNMSVWHFIFNTSLQM
QMMMGQKJTLXRHPAQVOYSDNFMGUEJKWQHAFMUCNUEQFATXYBYYB
NKLGRTHQWSODJGKKCTBAOAQWORRIABHZLBRYLOPCABDSAYOUZC
OURXQEZPWZEYCVSIXEHJGIHLDNXFNGITOVUVSLDAEGCPZFZMMB
ISQVEDRFAPRUSXDRQIURPTSZNKOMFGEONTJMLBKASVZIXBZGUQ
SRFWXKHRMFAXPRDJQVTNMHGECMGISZOCOPCGGRFHCDIITYMIVJ
RJGLFBLGZUITOOTCQGECFRNUTZFOSTFNFYTWGZSSTRFNSBABYB
ECYCJYGHOCKPAVRKWUEUHHZVXPTUNUNONMZSPEFJOXEXPVZLIJ
VSAOZTXODNKHOGLPJJIGVUVBJQEVLKFPQNKDCLQHSCDMUXEDYX
NWIMLBAKIMLLASPMDBRUJOQNPRFWLHZRRUTKPKEDGIBQPETMQB
INGPHEMPRESAJOGSEIRVJAJUIQWPLOVJHGAUAXKANFCKHINRZM
WNOEBEVNLPBARHPPLLIXFIEUTFLRVFWECCPHYGVXFSGREOESLR
RSLTFSUOOFDBBUCMYJCAFBPPCGHWHAUPNISLUDABUNXIAFIKTI
KGOEHIWQTIJLSKCGNEKSNLTDHWGQPXNPUWARUVXDASINDCLBEW
HANNCXEUYUCFMPOPWSGRLFPHQUJAWRQDPPSAWSIMNQWNHRCWSN
DICCRJEDPJKAKROFXUYBKMUZQWXUYPCFZZFANBSEZCXOBAMDRS
PGEIJUNHLSDSLVTYHLPATRJJHMGWSZZJFFMLTANTLBYVONVFZB
XETAJBOMYEFJGECPMGOQHRGVQCHQRLILRXTHRSLQYJCAMTXYBT
ATSEUJLCRQVQUNRTLINPJPMBZBXBZYGEVWFCAEZIXYFCNWYMQV
HAEDBQJPTJTYHBWOCURSUKMEDVHOLWMDRTMGNOPTSLNIXDZVDD
QRLDEBFJLFJOWTFIYOWRVYLUQCOSBAYXSEGTEPDKHIPOGHLHVI
DTHFNIXWLKKPTNVYTUFLGZWXDUKARKGFMNQCGMQWINSNTAIVRU
XSWNWZDHJXYEQRYOEPYNOYGHMHIOQKPKVFPXOGKYAYIJWJNSGE
MEEPSMZMVAFJEQTUZJPGLCHHGJCPJXCXHRSFCYRBUNNDJOFQGJ
EIMUKYIBPTSSPIDRQBYSQGRLEBSPOJPSZNBXIXKKGFTWFLXZMF
QQABAVWVDPAJPZMKVERJPLNIAZCTGWGLAJBUOVPRHVAMHZVIYQ
EXRWAARFSWSOXMINWDMWVLVZABSUDPSEHOQXFQEHHPALMTLBXQ
EWKOJRAAPXNAFZVSMKKQEMIWSHJEKMXJNTPRISXJYTSCIHIEVU
NNEZDEBJYDAPZGWJWPYYTVOZQPKABVZCVEFPOKPOYWMLONSCBC
YOTAWKGBEIRRINAAPOLWSISTSTORWEKBQHPSNNSPTTREJTFRQZ
ZVIXLJOZSRMMDQARQVMZMHXJNDMNNKLZHKEDLDGMXCZKTGQADN
GINJVRSGELURJDHNKLEAFQTKOEARCFMNCIAYRUKHEVUZJRPEFN
BSGQGNYSELKUMHYGIQUPQXEULXIVROVSOTSOCSITFXNDUSIIK
JIBAMZVKARGVALORNFMNWFJTJKJMELPLQKUCOZSHUWQGOGICBR
VOXUALDLKGMSLQXMSEGMENTOXHKRIWZVVDQIUAEXPADJYRYFAJ
ANOEMPVQZOJYBHMESQPNWCLEGALHRCDGIDAANILUHVBWRFPTNE
QSZDLACZASAOHJEEESBYYXBCOSZXFBESIKKVJEAFKGKUDONOFV
AJNDNCDRKJIWCIWFOKOKKOKYUZGWHXZRXTDCJKNDRHGZOZZUVF
BEEEIOBJETIVOHCFEETTAJZEWJMXDRWFNCHFVBVAKAUVQAXTCLY
IWIHYZKUVPKEIMULSZPXMYJGIVLTDWBQEOKBOLCEDZFPOYJXKY
KPLIZOWGGNQBLEXNCHYKUPLWPGSGSTSUSAZGWDDGIVUFUQICQU
YZNHKTBKJVENTASFLCPHXAOWGHHJMHMYPRHPJTWRLWCKNETERP
ZLDIUCMNSFRBCORPGJBXZDZMNUDKRNASHTDGVWKEAXEKWBLXBB
SZDNFDJHFOOBIEGHYFUUKSODAILAXVRFIEAIKALIVYHJNIBHFD"""


    lineas = [
        fila.strip().replace(" ", "")
        for fila in cuadricula_texto.splitlines()
        if fila.strip()
    ]
    cuadricula = [list(fila) for fila in lineas]
    filas = len(cuadricula)

    palabras = [
        "INNOVACION", "EMPRESA", "NEGOCIO", "MERCADO", "CLIENTE", "IDEA", "PRODUCTO",
        "SERVICIO", "FINANZAS", "PLAN", "PROPUESTA", "VALOR", "SEGMENTO", "COSTOS",
        "INGRESOS", "CANALES", "RECURSOS", "RELACION", "ALIADOS", "LIENZO", "VISION",
        "MISION", "OBJETIVO", "METRICA", "COMPETENCIA", "ANALISIS", "RIESGO",
        "ESTRATEGIA", "IMPLEMENTAR", "CRECIMIENTO", "EQUIPO", "LIDERAZGO", "PROTOTIPO",
        "VENTAS", "MARKETING", "TECNOLOGIA", "LEGAL", "PITCH", "INVERSION", "VALIDAR"
    ]

    def buscar_palabra_en_direccion(palabra, fila_inicio, col_inicio, dir_fila, dir_col):
        for i, letra in enumerate(palabra):
            fila = fila_inicio + i * dir_fila
            col = col_inicio + i * dir_col
            
            # Corrección: Verificar límites de forma segura para cuadrículas no rectangulares
            if not (0 <= fila < filas and 0 <= col < len(cuadricula[fila])):
                return False
            
            if cuadricula[fila][col] != letra:
                return False
        return True

    direcciones = {
        "Horizontal →": (0, 1),
        "Horizontal ←": (0, -1),
        "Vertical ↓": (1, 0),
        "Vertical ↑": (-1, 0),
        "Diagonal ↘": (1, 1),
        "Diagonal ↖": (-1, -1),
        "Diagonal ↙": (1, -1),
        "Diagonal ↗": (-1, 1)
    }

    encontradas = {}

    print("=" * 70)
    print("BÚSQUEDA DE PALABRAS EN SOPA DE LETRAS")
    print("=" * 70)

    for palabra in palabras:
        palabra_encontrada_flag = False
        for fila in range(filas):
            # Corrección: Iterar sobre la longitud de la fila actual
            for col in range(len(cuadricula[fila])):
                for nombre_dir, (df, dc) in direcciones.items():
                    if buscar_palabra_en_direccion(palabra, fila, col, df, dc):
                        encontradas[palabra] = {
                            "fila": fila + 1,
                            "columna": col + 1,
                            "direccion": nombre_dir
                        }
                        print(f"✓ {palabra:15} | Fila: {fila + 1:2} | Columna: {col + 1:2} | {nombre_dir}")
                        palabra_encontrada_flag = True
                        break
                if palabra_encontrada_flag:
                    break
            if palabra_encontrada_flag:
                break
        
        if not palabra_encontrada_flag:
            print(f"✗ {palabra:15} | NO ENCONTRADA")

    print("\n" + "=" * 70)
    print(f"RESUMEN: {len(encontradas)}/{len(palabras)} palabras encontradas")
    print("=" * 70)

    return encontradas

resultados = buscar_palabras_sopa_letras()